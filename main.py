import os
import time
import requests
from threading import Thread
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# -----------------------------
# –ú–∏–Ω–∏-–≤–µ–±—Å–µ—Ä–≤–µ—Ä –¥–ª—è "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–∑–Ω–∏"
# -----------------------------
app_web = Flask(__name__)

@app_web.route("/")
def home():
    return "–ë–æ—Ç –æ–Ω–ª–∞–π–Ω!"

def run_web():
    # –í Replit –æ–±—ã—á–Ω–æ –æ—Ç–∫—Ä—ã—Ç –ø–æ—Ä—Ç 8080
    app_web.run(host="0.0.0.0", port=8080)

def keep_alive():
    t = Thread(target=run_web, daemon=True)
    t.start()
    print("üåê keep_alive –∑–∞–ø—É—â–µ–Ω (Flask –Ω–∞ :8080)")

def start_autopinger():
    """
    –ü–∏–Ω–≥—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π URL —Ä–µ–ø–ª–∞ –∫–∞–∂–¥—ã–µ ~4 –º–∏–Ω—É—Ç—ã,
    —á—Ç–æ–±—ã Replit –Ω–µ "–∑–∞—Å—ã–ø–∞–ª", –¥–∞–∂–µ –µ—Å–ª–∏ UptimeRobot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.
    """
    repl_owner = os.environ.get("REPL_OWNER")
    repl_slug = os.environ.get("REPL_SLUG")
    manual_url = os.environ.get("REPL_URL")  # –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ä—É–∫–∞–º–∏ –≤ Secrets

    if manual_url:
        url = manual_url
    elif repl_owner and repl_slug:
        url = f"https://{repl_slug}.{repl_owner}.repl.co"
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL —Ä–µ–ø–ª–∞. –ó–∞–¥–∞–π REPL_URL –≤ Secrets.")
        return

    def _ping_loop():
        print(f"üõ∞Ô∏è –∞–≤—Ç–æ–ø–∏–Ω–≥–µ—Ä —Ü–µ–ª–∏—Ç—Å—è –≤: {url}")
        while True:
            try:
                requests.get(url, timeout=10)
            except Exception as e:
                print("–ê–≤—Ç–æ–ø–∏–Ω–≥–µ—Ä: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", e)
            time.sleep(240)  # ~4 –º–∏–Ω—É—Ç—ã

    Thread(target=_ping_loop, daemon=True).start()

# -----------------------------
# –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞
# -----------------------------
hp = 0
current_buttons = [["–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"]]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text is not None:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π RPG-–±–æ—Ç üåû",
            reply_markup=ReplyKeyboardMarkup(current_buttons, one_time_keyboard=False)
        )

async def morning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global hp, current_buttons
    hp = 0
    if update.message and update.message.text is not None:
        await update.message.reply_text(
            "–ù–∞—Å—Ç—é—à–∫–∞ –∏–¥—ë—Ç –ø–æ–∫–æ—Ä—è—Ç—å –º–∏—Ä! üåû\n–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —ç–Ω–µ—Ä–≥–∏–∏ (HP) —Å–µ–≥–æ–¥–Ω—è? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.",
            reply_markup=ReplyKeyboardRemove()
        )

async def set_hp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global hp, current_buttons
    if update.message and update.message.text:
        try:
            value = int(update.message.text)
            if 0 <= value <= 100:
                hp = value
                current_buttons = [["–ü–æ–¥—Ö–∏–ª–∏–ª–∞—Å—å", "–í—Ä–∞–≥ –Ω–∞ –ø—É—Ç–∏"], ["–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏"]]
                await update.message.reply_text(
                    f"–≠–Ω–µ—Ä–≥–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {hp} HP.\n–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –¥–Ω—è!",
                    reply_markup=ReplyKeyboardMarkup(current_buttons, one_time_keyboard=False)
                )
            else:
                await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")

async def action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global hp, current_buttons
    if not update.message or not update.message.text:
        return

    text = update.message.text
    if text in ["–ü–æ–¥—Ö–∏–ª–∏–ª–∞—Å—å", "–í—Ä–∞–≥ –Ω–∞ –ø—É—Ç–∏"]:
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ HP –ø—Ä–∏–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±–∞–≤–∏—Ç—å? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:")
        if context.user_data is not None:
            context.user_data["last_action"] = text
    elif text == "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏":
        hp = 0
        current_buttons = [["–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"]]
        await update.message.reply_text(
            "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ üåô –≠–Ω–µ—Ä–≥–∏—è –æ–±–Ω—É–ª–µ–Ω–∞.",
            reply_markup=ReplyKeyboardMarkup(current_buttons, one_time_keyboard=False)
        )
    elif text == "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ":
        await morning(update, context)

async def update_hp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global hp
    if not update.message or not update.message.text:
        return

    user_data = context.user_data or {}
    if "last_action" in user_data:
        try:
            value = int(update.message.text)
            action_type = user_data["last_action"]

            if action_type == "–ü–æ–¥—Ö–∏–ª–∏–ª–∞—Å—å":
                hp += value
            else:
                hp -= value

            if hp <= 0:
                message = f"{hp} HP ‚Äî –¢—ã –∏—Å—Ç–æ—â–µ–Ω–∞! –ü–æ—Ä–∞ —Å—Ä–æ—á–Ω–æ —Ö–∏–ª–∏—Ç—å—Å—è! üòµ"
            elif hp < 20:
                message = f"{hp} HP ‚Äî –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, —Å–∏–ª—ã —Ç–∞—é—Ç‚Ä¶ ü©π"
            elif hp < 50:
                message = f"{hp} HP ‚Äî –¢—ã –¥–µ—Ä–∂–∏—à—å—Å—è, –Ω–µ —Å–¥–∞–≤–∞–π—Å—è!"
            elif hp < 80:
                message = f"{hp} HP ‚Äî –ü–æ—á—Ç–∏ –ø–æ–ª–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è ‚öîÔ∏è"
            else:
                message = f"{hp} HP ‚Äî –ü–æ–ª–Ω–∞ —Å–∏–ª, –ù–∞—Å—Ç—é—à–∫–∞! üí™"

            await update.message.reply_text(message)
            user_data.pop("last_action", None)
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")

def main():
    token = os.environ.get("TOKEN")
    if not token:
        raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TOKEN –≤ Secrets!")

    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ$"), morning))
    app.add_handler(MessageHandler(filters.Regex("^[0-9]{1,3}$"), set_hp))
    app.add_handler(MessageHandler(filters.Regex("^(–ü–æ–¥—Ö–∏–ª–∏–ª–∞—Å—å|–í—Ä–∞–≥ –Ω–∞ –ø—É—Ç–∏|–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏)$"), action))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), update_hp))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! (long polling)")
    app.run_polling(close_loop=False)  # –Ω–µ –¥–∞—ë–º –ø—Ä–æ—Ü–µ—Å—Å—É –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Ü–∏–∫–ª–∞

if __name__ == "__main__":
    keep_alive()        # –ø–æ–¥–Ω–∏–º–∞–µ–º Flask –Ω–∞ :8080
    start_autopinger()  # –∞–≤—Ç–æ-–ø–∏–Ω–≥ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
    main()
